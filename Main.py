#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 18, 2018 07:46:20 PM PKT  platform: Linux

import os
from _datetime import datetime
import sqlite3
from sqlite3 import Error

# import DataBaseManager as db
from tkinter import messagebox
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Main_support
import MakeBillPage
import AddStock
import SaleSummary
import BillsViewer
import customer
import Ledger

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    print("vp start gui calling")
    global val, w, root
    print("1")
    root = tk.Tk()
    bg = tk.PhotoImage(file="slide-content-3.png")
    label = tk.Label(root,image=bg)
    label.place(x=275,y=400)
    print("2")
    root.resizable(0,0)
    print("3")
    top = Main (root)
    print("4")
    Main_support.init(root, top)
    root.mainloop()

w = None
stock_limit = 100
def create_main(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    print("create main calling")
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Main (w)
    Main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_main():
    print("destroy main calling")
    global w
    w.destroy()
    w = None

class Main:
    def tick(self):
        time1 = ''
        time2 =datetime.now().time().strftime("%H:%M:%S")
        if time2 != time1:
            time1 = time2
            self.timeLabel.configure(text = time2)
        self.timeLabel.after(200, self.tick)

    def getpwd(self):
        password = ''
        root = tk.Tk()
        root.geometry("400x300")
        namebox = tk.Entry(root)
        pwdbox = tk.Entry(root, show='*')

        newnamebox = tk.Entry(root)
        newpwdbox = tk.Entry(root, show='*')

        # pwdbox.configure()
        def Aclick():
            password = pwdbox.get()
            cName = namebox.get()
            # root.destroy()
            # print(password)
            global conn
            try:
                conn = sqlite3.connect("MyDataBase.db")
                c = conn.cursor()
                c.execute(
                    'SELECT Password From Admin Where UserName = "%s"' % cName)
                rows = c.fetchall()
                find = False
                for row in rows:
                    if row == password:
                        Name = newnamebox.get()
                        newpassword = newpwdbox.get()
                        if newnamebox != namebox:
                            Adminchoice = messagebox.askyesno("Add Admin", "Do Want to Add new Admin?")
                            if Adminchoice:
                                c.execute('INSERT INTO Admin (UserName,Password) VALUES ("%s","%s")' % (
                                newnamebox, newpwdbox))
                                break
                        else:
                            c.execute('UPDATE Admin SET Password = "%s" WHERE UserName = "%s"' % (Name, newpassword))
                        find = True
                if not find:
                    messagebox.showerror("Error", "Wrong UserName or Password")

            except Error as e:
                print(e)

        tk.Label(root, text='Enter current User Name', font=("Times New Roman", 15, "normal")).pack(side='top')
        namebox.pack(side='top')
        tk.Label(root, text='Enter current Password', font=("Times New Roman", 15, "normal")).pack(side='top')
        pwdbox.pack(side='top')
        tk.Label(root, text='Enter new User Name', font=("Times New Roman", 15, "normal")).pack(side='top')
        newnamebox.pack(side='top')
        tk.Label(root, text='Enter new Password', font=("Times New Roman", 15, "normal")).pack(side='top')
        newpwdbox.pack(side='top')
        newpwdbox.bind('<Return>', Aclick)

        tk.Button(root, command=(Aclick), text='OK',width = 11).pack(side='top')
        root.mainloop()
    def less_stocks_stats(self):
        global conn, stock_limit
        try:
            conn = sqlite3.connect("MyDataBase.db")
            c = conn.cursor()
            c.execute(
                'SELECT Quantity From Stocks')
            rows = c.fetchall()
            for row in rows:
                if int(row[0]) < stock_limit:
                    return True
        except Error as e:
            print(e)
        return False
    def launchSaleSummary(self, top):
        top.destroy()
        SaleSummary.launchWindow()

    def LaunchMakeBill(self,top):
        top.destroy()
        MakeBillPage.launchWindow()

    def LaunchAddStock(self,top):
        top.destroy()
        AddStock.launchWindow()

    def LaunchLedger(self,top):
        top.destroy()
        Ledger.LaunchWindow()

    def LaunchAddCustomer(self,top):
        top.destroy()
        customer.launchWindow()

    def LaunchViewbills(self,top):
        top.destroy()
        BillsViewer.LaunchWindow()

    def createBackup(self):
        time2 = datetime.now().time().strftime("%H:%M:%S")
        date = datetime.date(datetime.now())
        dire = "backups/"+ str(date)+"::"+str(time2)
        if not os.path.exists(dire):
            os.makedirs(dire)
        # os.system("cd backups")
        # os.system(f"mkdir {date}")
        # os.system("cd ..")
        os.system(f"cp MyDataBase.db {dire}/MyDataBase.db")
        messagebox.showinfo("Done","Back up Created")

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans} -size 30 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 20 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font12 = "-family {DejaVu Sans} -size 16 -weight normal -slant" \
                 " roman -underline 0 -overstrike 0"

        top.geometry("1164x769")
        top.title("Asif Softwares")
        self.MakeBillButton = tk.Button(top)
        self.MakeBillButton.place(relx=0.137, rely=0.377, height=61, width=261)
        self.MakeBillButton.configure(font=font11)
        self.MakeBillButton.configure(text='''Make A Bill''')
        self.MakeBillButton.configure(width=251)
        self.MakeBillButton.configure(command=lambda :self.LaunchMakeBill(top))

        # self.UpdateStockButton = tk.Button(top)
        # self.UpdateStockButton.place(relx=0.387, rely=0.377, height=61
        #         , width=221)
        # self.UpdateStockButton.configure(font=font11)
        # self.UpdateStockButton.configure(text='''Update Stocks''')
        # self.UpdateStockButton.configure(width=221)

        self.LedgerButton = tk.Button(top)
        self.LedgerButton.place(relx=0.377, rely=0.494, height=61, width=251)
        self.LedgerButton.configure(font=font11)
        self.LedgerButton.configure(text='''Ledger''')
        self.LedgerButton.configure(width=251,command = lambda :self.LaunchLedger(top))

        self.SaleSummaryButton = tk.Button(top)
        self.SaleSummaryButton.place(relx=0.61, rely=0.377, height=61, width=261)
        self.SaleSummaryButton.configure(font=font11)
        self.SaleSummaryButton.configure(text='''Sales''')
        self.SaleSummaryButton.configure(width=261,command = lambda :self.launchSaleSummary(top))

        self.AddStockButton = tk.Button(top)
        self.AddStockButton.place(relx=0.61, rely=0.494, height=61, width=261)
        self.AddStockButton.configure(font=font11)
        self.AddStockButton.configure(text='''Inventory''')
        self.AddStockButton.configure(width=261,command=lambda :self.LaunchAddStock(top) )


        self.ViewBillsButton = tk.Button(top)
        self.ViewBillsButton.place(relx=0.137, rely=0.494, height=61, width=261)
        self.ViewBillsButton.configure(font=font11)
        self.ViewBillsButton.configure(text='''Bill Book''')
        self.ViewBillsButton.configure(width=221)
        self.ViewBillsButton.configure(command = lambda :self.LaunchViewbills(top))

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.198, rely=0.221, height=62, width=593)
        self.Label1.configure(font=font10)
        self.Label1.configure(text='''Asif Softwares''')
        self.Label1.configure(width=593)

        self.AddCustomerButton = tk.Button(top)
        self.AddCustomerButton.place(relx=0.377, rely=0.377, height=61
                , width=251)
        self.AddCustomerButton.configure(font=font11)
        self.AddCustomerButton.configure(text='''Customers''')
        self.AddCustomerButton.configure(width=231)
        self.AddCustomerButton.configure(width=261, command=lambda: self.LaunchAddCustomer(top))

        # self.SpendingsButton = tk.Button(top)
        # self.SpendingsButton.place(relx=0.473, rely=0.611, height=61, width=241)
        # self.SpendingsButton.configure(font=font11)
        # self.SpendingsButton.configure(text='''Spendings''')
        # self.SpendingsButton.configure(width=241)


        self.timeLabel = tk.Label(top)
        self.timeLabel.place(relx=0.865, rely=0.026, height=41, width=189)
        self.timeLabel.configure(font=font12)
        self.timeLabel.configure(text='''time''')
        self.timeLabel.configure(width=189)
        self.tick()


        self.DateLabel = tk.Label(top)
        self.DateLabel.place(relx=0.009, rely=0.026, height=31, width=199)
        self.DateLabel.configure(font=font12)
        self.DateLabel.configure(text='''Date''')
        self.DateLabel.configure(width=199)
        self.DateLabel.configure(text=datetime.today().strftime('%Y-%m-%d'))

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.198, rely=0.026, height=160, width=599)
        self._img1 = tk.PhotoImage(file="4.png")
        self.Label4.configure(image=self._img1)
        self.Label4.configure(width=599)
        # self.Label4.configure(wraplength="599")


        if self.less_stocks_stats():
            self.alert_image = tk.PhotoImage(file="./images/alert_icon.png")
            self.alert_image_label = tk.Label(top)
            self.alert_image_label.place(relx=0.9, rely=0.1, height=100, width=100)
            self.alert_image_label.configure(image=self.alert_image)
            # self.alert_image_label.configure(width=599)

        # self.Button7 = tk.Button(top)
        # self.Button7.place(relx=0.885, rely=0.91, height=31, width=121)
        # self.Button7.configure(text='''Backup''')
        # self.Button7.configure(command = self.createBackup)


if __name__ == '__main__':
    vp_start_gui()


def LaunchWindow():
    vp_start_gui()