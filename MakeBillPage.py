#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 04, 2018 07:50:55 PM PKT  platform: Linux

import sys
import datetime
import sqlite3
from sqlite3 import Error
import customer

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
    from tkinter import messagebox


try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import Main


# ****************************************************************************


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    # MakeBillPage_support.set_Tk_var()
    top = Toplevel1(root)
    # MakeBillPage_support.init(root, top)
    # root.protocol("WM_DELETE_WINDOW", _destroy)
    # root.bind("<Destroy>", _destroy)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    # MakeBillPage_support.set_Tk_var()
    top = Toplevel1(w)
    # MakeBillPage_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    BillList = []
    cursor = "nul"
    bill_profit = 0
    billNumber = 0
    num_of_item = 0
    global conn, c
    printer = None


    def onTypingItemName(self, event=None):
        cursor = "nul"
        try:
            itemNumber = self.NameListBox.size()
            for i in range(itemNumber):
                self.NameListBox.delete(0, 'end')

            text_to_search = self.SearchNameEntry.get()
            temp = "%" + text_to_search + "%"
            self.c.execute('SELECT * From Stocks WHERE Name like "%s"' % temp)  # ,('%'+text_to_search+'%')
            rows = self.c.fetchall()
            for row in rows:
                self.NameListBox.insert(0, row[1])
                # print(row)


        # conn.close()
        except Error as e:
            print(e)
        # finally:
        # c.close()
        # self.conn.close()

    def AddToBillList(self, item):
        self.BillList.append(item)

    def updateTotal(self,event = None):
        total = 0
        for row in self.Scrolledtreeview1.get_children():
            item = self.Scrolledtreeview1.item(row,"values")
            total+= int(item[3])

        discount = self.DiscountEntry.get()
        if discount!= '':
            discount = int(discount)
            total-=discount
        self.TotalLabel.configure(text=total)

        self.flush_fields()


    def fetch_item(self, event=None):
        list= self.NameListBox.curselection()
        name = self.NameListBox.get(list[0])
        self.cursor =list[0]
        self.c.execute('SELECT * From Stocks WHERE Name = "%s"' % name)
        row = self.c.fetchall()
        id = row[0][0]
        price = row[0][6]

        self.ProductCodeEntry.delete(0, 'end')
        self.PriceEntry.delete(0, 'end')
        self.ProductCodeEntry.insert(0, id)
        self.PriceEntry.insert(0, price)

    def flush_fields(self):
        self.QuantityEntry.delete(0,'end')
        self.ProductCodeEntry.delete(0,'end')
        self.PriceEntry.delete(0,'end')
        self.SearchNameEntry.delete(0,'end')
        self.CutEntry.delete(0,'end')
        self.BorrowedQuantityEntry.delete(0,'end')
        # self.isBorrowed.configure(value = 0)
        self.cursor = 0
        nlb = self.NameListBox.size()
        for i in range(nlb):
            self.NameListBox.delete(0,'end')



    def AddToSales(self, event=None):
        # list = self.NameListBox.curselection()
        selected_name = self.NameListBox.get(self.cursor)
        self.c.execute(f'SELECT * from Stocks  WHERE Name = "{selected_name}"')
        row = self.c.fetchall()
        print(row[0])
        id = row[0][0]
        buying_price = row[0][5]
        Available_quantity = row[0][2]
        qty = self.QuantityEntry.get()
        if qty != '':
            qty = int(qty)
        price = self.PriceEntry.get()
        if price != '':
            price = int(price)
        else:
            return
        if price <= 0 or qty<= 0:
            messagebox.showwarning("Invalid", "Please Fill All the fields")
            return

        borrowed_qty = self.BorrowedQuantityEntry.get()
        if borrowed_qty!= '':
            borrowed_qty = int(borrowed_qty)
        else:
            borrowed_qty = 0
        r_qty = qty -  borrowed_qty
        if Available_quantity <  r_qty:
            messagebox.showerror("Out Of Stock", f"only {Available_quantity} items available")
            return


        profit = (price-buying_price)*r_qty
        cut = self.CutEntry.get()
        if cut!='':
            cut = int(cut)
        else:
            cut = 0
        bkm_cut = borrowed_qty*cut
        self.bill_profit +=profit
        self.bill_profit +=bkm_cut


        self.c.execute('INSERT INTO Sales(Billid,Itemid,Item_quantitty,Item_total,Item_profit,Item_price)VALUES (?,?,?,?,?,?)',
                       (self.billNumber, id, r_qty, price * r_qty,profit,price))

        self.c.execute(f'Update Stocks SET Profit =Profit + {profit}, Quantity = Quantity - {r_qty} WHERE Name = "{selected_name}"')
        # self.ProductCodeEntry.insert(0, id)
        self.AddToList()

    def addcustomer(self,cursor = None):
        phone_num = self.CustomerPhone.get()
        root = tk.Tk()
        customer.Toplevel1(root,Phone=phone_num,cursor= cursor)
        root.mainloop()

    def commitDB(self):
        date = datetime.datetime.now()
        date=date.strftime("%Y-%m-%d")
        # date=str(date.strftime("%Y-%m-%d %H:%M"))
        total = int(self.TotalLabel.cget("text"))
        profit = 0
        discount = self.DiscountEntry.get()
        if discount!= '':
            discount = int(discount)
        else:
            discount = 0
        profit = self.bill_profit - discount
        rec = self.ReceivedEntry.get()
        if rec != '':
            rec = int(rec)
            lend = total - rec
            c_phn = self.CustomerPhone.get()
            if c_phn == '':
                messagebox.showerror("Invalid", "please Enter The Customer Phone Number")
                return
            self.c.execute(f'SELECT * FROM Customers WHERE PhoneNumber = "{c_phn}"')
            rows = self.c.fetchall()
            found = False
            for row in rows:
                found = True
            if not found:
                self.addcustomer(self.c)
                # print("not found")
                return
            self.c.execute(f'INSERT INTO Bills(Bill_Id,today_date,Profit,Sale_earn,Discount,Lended_amount,borrower_Id,Lend_date)'
                           f'VALUES ({self.billNumber},"{date}",{profit},{total},{discount},{lend},"{c_phn}","{date}")')

            self.c.execute(f'UPDATE Customers SET Due_Amount = Due_Amount + {lend} WHERE PhoneNumber = "{c_phn}"')
        else:
            self.c.execute(f'INSERT INTO Bills(Bill_Id,today_date,Profit,Sale_earn,Discount,Lended_amount,borrower_Id,Lend_date)'
                           f'VALUES ({self.billNumber},"{date}",{profit},{total},{discount},0,"0","0")')
        self.conn.commit()
        messagebox.showinfo("Doing","Printing Bill")
        self.printBillNow()
        self.flush_fields()
        for i in self.Scrolledtreeview1.get_children():
            self.Scrolledtreeview1.delete(i)
        self.TotalLabel.configure(text = 0)
        self.bill_profit = 0
        self.DiscountEntry.delete(0,'end')
        self.CustomerPhone.delete(0,'end')
        self.ReceivedEntry.delete(0,'end')
        self.customerBorrowed = 0
        self.billNumber += 1
        self.BillNumber.configure(text=self.billNumber)

        # self.printer.text("Hello World")
        # self.printer.lf()

    def AddToList(self):
        # list = self.NameListBox.curselection()
        pName = self.NameListBox.get(self.cursor)
        quantity = int(self.QuantityEntry.get())
        price = int(self.PriceEntry.get())
        total = quantity * price

        self.Scrolledtreeview1.insert('', 'end', text=self.num_of_item,
                                      values=(pName, quantity, price, total))
        # Increment counter
        self.tree_iterator = self.tree_iterator + 1
        self.num_of_item += 1
        # self.Scrolledlistbox1.insert(0,
        #                              " Name:%s~                        | Quantity:%d      | Price:%d      | Total:%d " % (
        #                              pName, quantity, price, total))
        package = [pName, quantity, price, total]
        self.AddToBillList(package)
        self.updateTotal()
        self.SearchNameEntry.focus()

    def DeleteItemfromList(self, event=None):
        curItem = self.Scrolledtreeview1.focus()
        item = self.Scrolledtreeview1.item(curItem, 'values')
        choice = messagebox.askyesno("confirmation", "Do you want to Delete this?")
        if choice:
            self.Scrolledtreeview1.delete(curItem)
            self.c.execute(f"SELECT Item_Id from Stocks WHERE Name = '{item[0]}'")
            rows = self.c.fetchall()
            id =0
            for row in rows:
                id = row[0]
                break
            self.c.execute(f"Delete from Sales WHERE Itemid = {id} and Billid = {self.billNumber}")
            self.updateTotal()


    def EnterCode(self,event = None):
        self.ProductCodeEntry.focus()

    def RecordLendings(self,event = None):
        rec = self.ReceivedEntry.get()
        if rec != '':
            rec = int(rec)
        else:
            messagebox.showerror("Invalid","please Enter The received amount")
            return
        c_phn = self.CustomerPhone.get()
        if c_phn != '':
            c_phn = int(c_phn)
        else:
            messagebox.showerror("Invalid","please Enter The received amount")
            return
        self.c.execute(f'SELECT * FROM Customers WHERE PhoneNumber = {c_phn}')
        rows = self.c.fetchall()
        found = False
        for row in rows:
            found = True
        if found == False:
            # OpenCustomerViewer()
            a= 0
        else:
            total = int(self.TotalLabel.cget("text"))
            lend = total - rec
            print(lend)
            self.c.execute(f'UPDATE Customers SET Due_Amount = Due_Amount + {lend} WHERE PhoneNumber = {c_phn}')

    def GetRecByCode(self,event = None):

        id = self.ProductCodeEntry.get()
        self.c.execute(f'SELECT * From Stocks WHERE Item_Id = {id}')
        row = self.c.fetchall()
        Name = row[0][1]
        price = row[0][6]
        si = self.NameListBox.size()
        for i in range(si):
            self.NameListBox.delete(0, 'end')
        self.PriceEntry.delete(0, 'end')
        self.NameListBox.insert(0, Name)
        self.PriceEntry.insert(0, price)

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        self.conn = sqlite3.connect("MyDataBase.db")
        self.c = self.conn.cursor()
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans} -size 30 -weight normal -slant" \
                 " roman -underline 0 -overstrike 0"
        font12 = "-family {DejaVu Sans} -size 15 -weight normal -slant" \
                 " roman -underline 0 -overstrike 0"
        font13 = "-family {DejaVu Sans Mono} -size 20 -weight normal " \
                 "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 24 -weight bold -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1298x754+339+142")
        top.title("Al-Ferooz Garments")
        top.configure(highlightcolor="black")
        # self.printer = getUSBPrinter()(idVendor=0x04e8,
        #                           idProduct=0x330f,
        #                           inputEndPoint=0x81,
        #                           outputEndPoint=0x02)  # Create the printer object with the connection params
        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.909, rely=0.915, height=31, width=84)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(text='''Print_OK''')
        self.Button1.configure(command=self.commitDB)

        self.AddCustomer = tk.Button(top)
        self.AddCustomer.place(relx=0.909, rely=0.855, height=31, width=84)
        self.AddCustomer.configure(activebackground="#f9f9f9")
        self.AddCustomer.configure(text='''Customers''')
        self.AddCustomer.configure(command=self.addcustomer)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.008, rely=0.0, height=80, width=180)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(font=font9)
        self.Label1.configure(text='''Make Bill''')

        # self.Scrolledlistbox1 = ScrolledListBox(top)
        # self.Scrolledlistbox1.place(relx=0.015, rely=0.385, relheight=0.435
        #                             , relwidth=0.968)
        # self.Scrolledlistbox1.configure(background="white")
        # self.Scrolledlistbox1.configure(font=font10)
        # self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        # self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        # self.Scrolledlistbox1.configure(width=10)
        # self.Scrolledlistbox1.bind('<Delete>', self.DeleteItemfromList)


        self.style.configure('mystyle.Treeview.Heading', font=('Calibri', 12))
        self.style.configure("mystyle.Treeview", highlightthickness=0, bd=0,
                             font=('Calibri', 12))  # Modify the font of the bodySellin
        self.Scrolledtreeview1 = ScrolledTreeView(top, style="mystyle.Treeview", columns=('Name', 'Quantity','price','Total'))
        self.Scrolledtreeview1.place(relx=0.015, rely=0.385, relheight=0.435
                                    , relwidth=0.968)
        self.Scrolledtreeview1.bind("<Delete>",self.DeleteItemfromList)
        # self.Scrolledtreeview1.bind("<ButtonRelease-1>",self.DeleteItemfromList)
        self.Scrolledtreeview1.tag_configure('odd', background='#E8E8E8')
        self.Scrolledtreeview1.tag_configure('even', background='#DFDFDF')
        # self.tree = ttk.Treeview(self.parent, columns=('Dose', 'Modification date'))
        self.Scrolledtreeview1.heading('#0', text='item#')
        self.Scrolledtreeview1.heading('#1', text='Name')
        self.Scrolledtreeview1.heading('#2', text='Quantity')
        self.Scrolledtreeview1.heading('#3', text='price')
        self.Scrolledtreeview1.heading('#4', text='Total')
        self.Scrolledtreeview1.column('#0',width = 50)  # , stretch=tk.YES
        self.Scrolledtreeview1.column('#1',width = 400)  # , stretch=tk.YES
        self.Scrolledtreeview1.column('#2',width = 100)  # , stretch=tk.YES
        self.Scrolledtreeview1.column('#3',width = 100)  # , stretch=tk.YES
        self.Scrolledtreeview1.column('#4',width = 100)  # , stretch=tk.YES
        self.tree_iterator = 0


        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.015, rely=0.113, height=28, width=169)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(font=font12)
        self.Label2.configure(text='''Item Name:''')

        self.DateLabel = tk.Label(top)
        self.DateLabel.place(relx=0.867, rely=0.007, height=31, width=127)
        self.DateLabel.configure(activebackground="#f9f9f9")
        self.DateLabel.configure(anchor='sw')
        self.DateLabel.configure(font=font12)
        self.DateLabel.configure(width=123)
        now = datetime.datetime.now()
        now.strftime("%Y-%m-%d %H:%M")
        self.DateLabel.configure(text=now)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.809, rely=0.013, height=31, width=69)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(font=font12)
        self.Label4.configure(text='''Date:''')
        self.Label4.configure(width=69)

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.755, rely=0.053, height=31, width=135)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(font=font12)
        self.Label5.configure(text='''Bill Number:''')
        self.Label5.configure(width=135)

        self.BillNumber = tk.Label(top)
        self.BillNumber.place(relx=0.874, rely=0.053, height=31, width=115)
        self.BillNumber.configure(activebackground="#f9f9f9")
        self.BillNumber.configure(anchor='w')
        self.BillNumber.configure(font=font12)
        self.BillNumber.configure(width=115)
        self.c.execute('SELECT Max(Bill_Id) from Bills ')
        bill = self.c.fetchall()
        self.billNumber = bill[0][0]
        self.billNumber += 1
        self.BillNumber.configure(text=self.billNumber)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.039, rely=0.212, height=48, width=118)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(font=font12)
        self.Label3.configure(text='''Quantity:''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.258, rely=0.212, height=41, width=99)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(font=font12)
        self.Label6.configure(text='''Price:''')

        # self.Label7 = tk.Label(top)
        # self.Label7.place(relx=0.543, rely=0.206, height=51, width=109)
        # self.Label7.configure(activebackground="#f9f9f9")
        # self.Label7.configure(font=font12)
        # self.Label7.configure(text='''Discount:''')


        # relx = 0.651, rely = 0.206, height = 43
        # , relwidth = 0.128
        # discount place

        self.Label7_6 = tk.Label(top)
        self.Label7_6.place(relx=0.435, rely=0.840, height=51, width=109)
        self.Label7_6.configure(activebackground="#f9f9f9")
        self.Label7_6.configure(font=font12)
        self.Label7_6.configure(text='''Received:''')
        self.Label7_6.configure(width=109)

        self.Label7_ = tk.Label(top)
        self.Label7_.place(relx=0.435, rely=0.910, height=51, width=109)
        self.Label7_.configure(activebackground="#f9f9f9")
        self.Label7_.configure(font=font12)
        self.Label7_.configure(text='''Customer\nphone#:''')
        self.Label7_.configure(width=109)

        self.SearchNameEntry = tk.Entry(top)
        self.SearchNameEntry.place(relx=0.139, rely=0.106, height=43, relwidth=0.074)
        self.SearchNameEntry.configure(background="white")
        self.SearchNameEntry.configure(font=font13)
        self.SearchNameEntry.configure(selectbackground="#c4c4c4")
        self.SearchNameEntry.bind("<Key>", self.onTypingItemName)
        self.SearchNameEntry.bind('<Return>', self.EnterCode)
        self.SearchNameEntry.focus()

        self.NameListBox = tk.Listbox(top)
        self.NameListBox.place(relx=0.223, rely=0.106, relheight=0.061
                               , relwidth=0.265)
        self.NameListBox.configure(background="white")
        self.NameListBox.configure(font=font12)
        self.NameListBox.configure(selectbackground="#c4c4c4")
        self.NameListBox.configure(width=344)
        # self.NameListBox.bind('<Down>', self.cursor_down)
        # self.NameListBox.bind('<Up>', self.cursor_up)
        self.NameListBox.bind('<Return>', self.fetch_item)
        # self.NameListBox.bind('<FocusIn>', self.dummy)
        # self.cursor = self.NameListBox.size()

        self.QuantityEntry = tk.Entry(top)
        self.QuantityEntry.place(relx=0.135, rely=0.212, height=43
                                 , relwidth=0.12)
        self.QuantityEntry.configure(background="white")
        self.QuantityEntry.configure(font=font13)
        self.QuantityEntry.configure(selectbackground="#c4c4c4")
        # self.PriceEntry.bind('<Return>', self.AddToList)

        self.PriceEntry = tk.Entry(top)
        self.PriceEntry.place(relx=0.351, rely=0.212, height=43, relwidth=0.136)
        self.PriceEntry.configure(background="white")
        self.PriceEntry.configure(font=font13)
        self.PriceEntry.configure(selectbackground="#c4c4c4")
        self.PriceEntry.bind('<Return>', self.AddToSales)
        # function() lambda event:

        self.isBorrowed = tk.Label(top)
        self.isBorrowed.place(relx=0.501, rely=0.206, relheight=0.057, relwidth=0.183)
        self.isBorrowed.configure(activebackground="#f9f9f9")
        self.isBorrowed.configure(font=font12)
        self.isBorrowed.configure(justify='left')
        self.isBorrowed.configure(text='''Borrowed Quantity:''')
        self.isBorrowed.configure(width=237)

        self.BorrowedQuantityEntry = tk.Entry(top)
        self.BorrowedQuantityEntry.place(relx=0.69, rely=0.206, height=43, relwidth=0.089)
        self.BorrowedQuantityEntry.configure(background="white")
        self.BorrowedQuantityEntry.configure(font=font13)
        self.BorrowedQuantityEntry.configure(selectbackground="#c4c4c4")
        self.BorrowedQuantityEntry.configure(width=116)

        self.CutEntry = tk.Entry(top)
        self.CutEntry.place(relx=0.847, rely=0.206, height=43, relwidth=0.051)
        self.CutEntry.configure(background="white")
        self.CutEntry.configure(font=font13)
        self.CutEntry.configure(selectbackground="#c4c4c4")
        self.CutEntry.configure(width=66)
        self.CutEntry.bind('<Return>', self.AddToSales)

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.054, rely=0.875, height=51, width=109)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(font=font12)
        self.Label7.configure(text='''Discount:''')

        self.DiscountEntry = tk.Entry(top)
        self.DiscountEntry.place(relx=0.146, rely=0.875, height=43, relwidth=0.136)
        self.DiscountEntry.configure(background="white")
        self.DiscountEntry.configure(font=font13)
        self.DiscountEntry.configure(selectbackground="#c4c4c4")
        self.DiscountEntry.bind('<FocusOut>',self.updateTotal)
        # relx = 0.054, rely = 0.889, relheight = 0.057
        # , relwidth = 0.144
        #cb bnc

        self.Label10_1 = tk.Label(top)
        self.Label10_1.place(relx=0.79, rely=0.206, height=41, width=69)
        self.Label10_1.configure(activebackground="#f9f9f9")
        self.Label10_1.configure(font=font12)
        self.Label10_1.configure(text='''Cut:''')
        self.Label10_1.configure(width=69)


        self.isCustomerBorrowing = tk.Checkbutton(top)
        self.isCustomerBorrowing.place(relx=0.3, rely=0.875, relheight=0.057, relwidth = 0.133)
        self.isCustomerBorrowing.configure(activebackground="#f9f9f9")
        self.isCustomerBorrowing.configure(font=font12)
        self.isCustomerBorrowing.configure(justify='left')
        self.isCustomerBorrowing.configure(text='''Borrowing''')
        self.customerBorrowed = tk.IntVar()
        self.isCustomerBorrowing.configure(width=147, variable = self.customerBorrowed)




        self.ReceivedEntry = tk.Entry(top)
        self.ReceivedEntry.place(relx=0.532, rely=0.840, height=43, relwidth = 0.097)
        self.ReceivedEntry.configure(background="white")
        self.ReceivedEntry.configure(font=font13)
        self.ReceivedEntry.configure(selectbackground="#c4c4c4")
        self.ReceivedEntry.configure(width=126)

        self.CustomerPhone = tk.Entry(top)
        self.CustomerPhone.place(relx=0.532, rely=0.910, height=43, relwidth=0.097)
        self.CustomerPhone.configure(background="white")
        self.CustomerPhone.configure(font=font12)
        self.CustomerPhone.configure(selectbackground="#c4c4c4")
        self.CustomerPhone.configure(width=126)
        # self.CustomerPhone.configure(command = self.RecordLendings)

        self.TotalLabel_9 = tk.Label(top)
        self.TotalLabel_9.place(relx=0.639, rely=0.849, height=76, width=145)
        self.TotalLabel_9.configure(activebackground="#f9f9f9")
        self.TotalLabel_9.configure(font=font10)
        self.TotalLabel_9.configure(text='''Total:''')
        self.TotalLabel_9.configure(width=145)

        self.TotalLabel = tk.Label(top)
        self.TotalLabel.place(relx=0.747, rely=0.835, height=76, width=145)
        self.TotalLabel.configure(activebackground="#f9f9f9")
        self.TotalLabel.configure(anchor='se')
        self.TotalLabel.configure(font=font10)
        self.TotalLabel.configure(text='''0''')

        # self.TotalLabel = tk.Label(top)
        # self.TotalLabel.place(relx=0.736, rely=0.849, height=36, width=155)
        # self.TotalLabel.configure(activebackground="#f9f9f9")
        # self.TotalLabel.configure(font=font10)
        # self.TotalLabel.configure(text='''0''')

        self.ProductCodeEntry = tk.Entry(top)
        self.ProductCodeEntry.place(relx=0.651, rely=0.106, height=43
                                    , relwidth=0.128)
        self.ProductCodeEntry.configure(background="white")
        self.ProductCodeEntry.configure(font=font13)
        self.ProductCodeEntry.configure(width=166)

        self.Label10 = tk.Label(top)
        self.Label10.place(relx=0.508, rely=0.099, height=41, width=159)
        self.Label10.configure(font=font12)
        self.Label10.configure(text='''Product Code:''')
        self.Label10.configure(width=159)



    def __del__(self):
        Main.LaunchWindow()
        self.c.close()
        self.conn.close()

    def printBillNow(self):
        with open("Header") as f:
            with open("Bill", "wt") as f1:
                for line in f:
                    f1.write(line)

        # with open("Bill")

        with open("Footer") as f:
            with open("Bill.txt", "at") as f1:
                for line in f:
                    f1.write(line)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()


def launchWindow():
    vp_start_gui()

